@page "/users/add"
@page "/users/edit/{UserId:guid}"
@using ShopPlatform.Client.Utils
@inject HttpClient client
@inject ModalManager modalManager
@inject NavigationManager navigation

<h3 class="text-center mt-4 text-primary">@pageTitle</h3>

<div class="container mt-4 d-flex justify-content-center">
    <div class="card shadow-lg p-4 rounded w-100" style="max-width: 600px;">
        <EditForm Model="@userDTO" OnValidSubmit="EditOrUpdate">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Ad</label>
                <InputText class="form-control" @bind-Value="userDTO.FirstName" placeholder="Adınızı girin" />
                <ValidationMessage For="@(() => userDTO.FirstName)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Soyad</label>
                <InputText class="form-control" @bind-Value="userDTO.LastName" placeholder="Soyadınızı girin" />
                <ValidationMessage For="@(() => userDTO.LastName)" />
            </div>

            <div class="mb-3">
                <label class="form-label">E-Posta</label>
                <InputText class="form-control" @bind-Value="userDTO.EMailAddress" placeholder="ornek@site.com" />
                <ValidationMessage For="@(() => userDTO.EMailAddress)" />
            </div>
            
            <div class="mb-3">
                <label class="form-label">E-Posta</label>
                <InputText class="form-control" @bind-Value="userDTO.Password" placeholder="OS58!_?=s" />
                <ValidationMessage For="@(() => userDTO.Password)" />
            </div>

            <div class="form-check mb-3">
                <InputCheckbox class="form-check-input" @bind-Value="userDTO.IsActive" />
                <label class="form-check-label">Aktif mi?</label>
            </div>

            <button type="submit" class="btn btn-success w-100">
                <i class="bi bi-save"></i> Kaydet
            </button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public Guid UserId { get; set; }

    private UserDTO userDTO = new();
    private string pageTitle = "Yeni Kullanıcı Ekle";

    protected override async Task OnInitializedAsync()
    {
        if (UserId != Guid.Empty)
        {
            pageTitle = "Kullanıcıyı Güncelle";

            // ✅ GET request kullanılıyor:
            var result = await client.GetFromJsonAsync<ShopPlatform.Shared.Responses.ServiceResponse<UserDTO>>($"api/user/{UserId}");
            userDTO = result?.Value ?? new();
        }
    }

    private async Task EditOrUpdate()
    {
        try
        {
            string url = (UserId == Guid.Empty) ? "api/user/create" : "api/user/update";

            HttpResponseMessage response = (UserId == Guid.Empty)
                ? await client.PostAsJsonAsync(url, userDTO)
                : await client.PutAsJsonAsync(url, userDTO);

            if (response.IsSuccessStatusCode)
            {
                modalManager.Show("✅ Kullanıcı başarıyla kaydedildi!");
                navigation.NavigateTo("/users");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                modalManager.Show($"❌ Hata: {error}");
            }
        }
        catch (Exception ex)
        {
            modalManager.Show($"⚠️ Hata oluştu: {ex.Message}");
        }
    }
}
